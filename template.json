{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters" : {
        "AllowedCidrIpForSSH": {
            "Type": "String",
            "Description": "The IP adress range with allowed connection to the EC2 instances over SSH",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP address of the form x.x.x.x/x"
        },
        "Ec2InstanceType": {
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": ["t2.nano", "t2.micro", "t2.small"]
        },
        "AmiId" : {
            "Type": "String",
            "Description": "The ID of the AMI to use for the EC2 instance",
            "Default": "ami-0850986d0fb9a8975"
        }
    },

    "Resources": {
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": "cf-shtannikov"
            }
        },

        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "cf-shtannikov-network"
                    }
                ]
            }
        },

        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "cf-shtannikov-igw"
                    }
                ]
            }
        },
        "VPCGatewayAttachment": {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId" : { "Ref": "InternetGateway" },
                "VpcId": { "Ref": "VPC" }
            }
        },

        "PublicSubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": "10.0.11.0/24",
                "AvailabilityZone": { "Fn::Select": [ 0, { "Fn::GetAZs": "" } ] },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "cf-shtannikov-public-subnet-a"
                    }
                ]
            }
        },
        "PublicSubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": "10.0.12.0/24",
                "AvailabilityZone" : { "Fn::Select": [ 1, { "Fn::GetAZs": "" } ] },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "cf-shtannikov-public-subnet-b"
                    }
                ]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "cf-shtannikov-public-route-table"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn" : "VPCGatewayAttachment",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "GatewayId": { "Ref": "InternetGateway" },
                "DestinationCidrBlock": "0.0.0.0/0"
            }
        },
        "SubnetARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnetA" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },
        "SubnetBRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnetB" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },

        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "cf-shtannikov-sec-group",
                "GroupDescription": "security group for instances created by cloud formation",
                "VpcId": { "Ref": "VPC" }
            }
        },
        "HttpSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "SecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": 80,
                "ToPort": 80,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "HttpsSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "SecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": 443,
                "ToPort": 443,
                "CidrIp": "0.0.0.0/0"
            }
        },
        "SshSecurityGroupIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Ref": "SecurityGroup" },
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "CidrIp": { "Ref": "AllowedCidrIpForSSH" }
            }
        },
        
        "LaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "LaunchTemplateName": "cf-shtannikov-launch-template",
                "LaunchTemplateData": {
                    "InstanceType":  { "Ref": "Ec2InstanceType" },
                    "ImageId":  { "Ref": "AmiId" },
                    "SecurityGroupIds": [ { "Ref": "SecurityGroup" } ]
                }
            }
        },
        "TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": "cf-shtannikov-target-group",
                "Protocol": "HTTP",
                "Port": 80,
                "VpcId" :{ "Ref": "VPC" }
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": "cf-shtannikov-auto-scaling-group",
                "LaunchTemplate": {
                    "LaunchTemplateId": { "Ref": "LaunchTemplate" },
                    "Version": { "Fn::GetAtt": [ "LaunchTemplate", "LatestVersionNumber" ] }
                },
                "MaxSize": "3",
                "MinSize": "1",
                "DesiredCapacity": "2",
                "VPCZoneIdentifier": [ { "Ref": "PublicSubnetA" }, { "Ref": "PublicSubnetB" } ],
                "TargetGroupARNs": [ { "Ref":"TargetGroup" } ]
            }
        },
        "CpuScalingPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AutoScalingGroupName": { "Ref": "AutoScalingGroup" },
                "PolicyType": "TargetTrackingScaling",
                "TargetTrackingConfiguration": {
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "ASGAverageCPUUtilization"
                    },
                    "TargetValue": 50
                }
            }
        },

        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "SecurityGroups": [ { "Ref": "SecurityGroup" } ],
                "Subnets": [ { "Ref": "PublicSubnetA" }, { "Ref": "PublicSubnetB" } ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "cf-shtannikov-app-load-balancer"
                    }
                ]
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "LoadBalancerArn": { "Ref": "ApplicationLoadBalancer" },
                "Protocol": "HTTP",
                "Port": 80,
                "DefaultActions": [ { "Type": "forward", "TargetGroupArn":  { "Ref":"TargetGroup" } } ]
            }
        }
    }
}
